@using Sandbox;
@using Sandbox.UI;
@namespace Sandbox.UI
@inherits PanelComponent;


<root class="@(Visible ? "" : "hide")">
	<div id="mainPanel">
		<div class="autogrow"></div>
		<button class="secondaryButton" onclick=@(() => state = IngameUiStates.Bank)> üè¶ </button>
		<button class="secondaryButton"  onclick=@(() => state = IngameUiStates.Trade)> üí∏ </button>
		<button class="mainButton"> GO </button>
		<button class="secondaryButton"  onclick=@(() => state = IngameUiStates.Building)> üè† </button>
		<div class="autogrow"></div>
		<button class="secondaryButton" onclick=@(() => state = IngameUiStates.Options)> ‚öôÔ∏è </button>
	</div>
	
	@foreach (var player in Lobby.getCurrentPlayers()) {
		<PlayerCard SteamId=@player.SteamId Name=@player.Name Owned=@OwnedFields/>
	}
	
	@if (state == IngameUiStates.Bank) {
		<Modal OnClose=@(() => state = IngameUiStates.None) Name="Bank">
			<Content>
				<p> Hello :3 </p>
			</Content>
		</Modal>
	}

	@if (state == IngameUiStates.Trade) {
		<Modal OnClose=@(() => state = IngameUiStates.None) Name="Trading">
			<Content>
				<p> Hello :3 </p>
			</Content>
		</Modal>
	}

	@if (state == IngameUiStates.Building) {
		<Modal OnClose=@(() => state = IngameUiStates.None) Name="Building">
			<Content>
				<p> Hello :3 </p>
			</Content>
		</Modal>
	}

	@if (state == IngameUiStates.Options) {
		<Modal OnClose=@(() => state = IngameUiStates.None) Name="Options">
			<Content>
				<p> Hello :3 </p>
			</Content>
		</Modal>
	}

</root>

@code {
	public enum IngameUiStates {
		Bank,
		Trade,
		Options,
		Building,
		None
	}
	
	[Property] public bool Visible { get; set; } = false;
	[Property] UiManager UiManager { get; set; }
	[Property] Lobby Lobby { get; set; }

	private IngameUiStates state { get; set; } = IngameUiStates.None;
	
	private Dictionary<string, ulong> OwnedFields = new Dictionary<string, ulong> {
		{"brown1", 0},
		{"brown2", 0},
		{"lightBlue1", 0},
		{"lightBlue2", 0},
		{"lightBlue3", 0},
		{"pink1", 0},
		{"pink2", 0},
		{"pink3", 0},
		{"orange1", 0},
		{"orange2", 0},
		{"orange3", 0},
		{"red1", 0},
		{"red2", 0},
		{"red3", 0},
		{"yellow1", 0},
		{"yellow2", 0},
		{"yellow3", 0},
		{"green1", 0},
		{"green2", 0},
		{"green3", 0},
		{"blue1", 0},
		{"blue2", 0},
		{"railway1", 0},
		{"railway2", 0},
		{"railway3", 0},
		{"railway4", 0},
		{"electriccompany", 0},
		{"watercompany", 0}
	};


	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash()
	{
		return System.HashCode.Combine(Visible, Lobby);
	}
}
