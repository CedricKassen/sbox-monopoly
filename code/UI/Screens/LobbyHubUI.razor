@using Sandbox;
@using Sandbox.Network
@using Sandbox.UI;
@namespace Sandbox.UI
@inherits PanelComponent

<root class="@(Visible ? "" : "hide") menu">

	<h1>MY_POOL_NO</h1>
	<h2>LOBBY SELECTION</h2>
	<div class="lobbies">
		@if (lobbies.Count <= 0) {
			<LobbyCard class="empty"></LobbyCard>
		}
		
		@foreach (var lobby in lobbies) {
			<a onclick=@(() => JoinLobby(lobby.LobbyId))>
				<LobbyCard @lobby=@lobby></LobbyCard> 
			</a>
		}
	</div>

	<div class="hub-buttons">
		<button class="back icon" onclick=@PressBack>
			keyboard_return
		</button>
		<button class="refetch icon" onclick=@ReloadLobbies>
            refresh
		</button>
	</div>
</root>

@code
{

	[Property, TextArea] public string MyStringValue { get; set; } = "Hello World!";
	[Property] public bool Visible { get; set; } = false;
	[Property] UiManager UiManager { get; set; }
	
	private List<LobbyInformation> lobbies = new List<LobbyInformation>();

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash()
	{
		return System.HashCode.Combine(Visible, lobbies);
	}
	

	protected override void OnStart()
	{
		base.OnStart();
		fetchLobbys();
	}
	
	void JoinLobby(ulong lobbyId)
	{
		Log.Info(lobbyId);
		GameNetworkSystem.Connect(lobbyId);
		UiManager.ChangeState(GameState.INLOBBY);
	}

	void ReloadLobbies()
	{
		fetchLobbys();
	}
	
	void PressBack()
	{
		UiManager.ChangeState(GameState.MENU);
	}
	
	private async void fetchLobbys()
	{
		lobbies = await Networking.QueryLobbies();
	}
	
}
