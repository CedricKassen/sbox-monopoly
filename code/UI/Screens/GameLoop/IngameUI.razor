@using System
@using Sandbox.Network
@using Sandbox.UI

@namespace Monopoly.UI.Screens.GameLoop
@inherits Panel;


<root>
	<div style="position: absolute; top: 50%; left: 50%">
		@if (_showRoll)
		{
			<h1> @_dice.Aggregate(0, (accumulator, dice) => dice.GetRollValue() + accumulator) </h1>
		}
	</div>

	<div id="mainPanel">
		<div class="autogrow"></div>
		<button class="secondaryButton" onclick="@(() => _state = IngameUiStates.Bank)"> üè¶ </button>
		<button class="secondaryButton" onclick="@(() => _state = IngameUiStates.Trade)"> üí∏ </button>
		<button class="mainButton" onclick="@Roll"> GO </button>
		<button class="secondaryButton" onclick="@(() => _state = IngameUiStates.Building)"> üè† </button>
		<div class="autogrow"></div>
		<button class="secondaryButton" onclick="@(() => _state = IngameUiStates.Options)"> ‚öôÔ∏è </button>
	</div>

	@foreach (var player in Lobby.Players)
	{
		<PlayerCard SteamId=@player.SteamId Name=@player.Name Owned=@_ownedFields/>
	}

	@if (_state == IngameUiStates.Bank)
	{
		<Modal OnClose=@(() => _state = IngameUiStates.None) Name="Bank">
			<Content>
				<p> Hello :3 </p>
			</Content>
		</Modal>
	}

	@if (_state == IngameUiStates.Trade)
	{
		<Modal OnClose=@(() => _state = IngameUiStates.None) Name="Trading">
			<Content>
				<p> Hello :3 </p>
			</Content>
		</Modal>
	}

	@if (_state == IngameUiStates.Building)
	{
		<Modal OnClose=@(() => _state = IngameUiStates.None) Name="Building">
			<Content>
				<p> Hello :3 </p>
			</Content>
		</Modal>
	}

	@if (_state == IngameUiStates.Options)
	{
		<Modal OnClose=@(() => _state = IngameUiStates.None) Name="Options">
			<Content>
				<button onclick=@LeaveLobby> Leave Game </button>
			</Content>
		</Modal>
	}

</root>

@code {

	public enum IngameUiStates
	{
		Bank,
		Trade,
		Options,
		Building,
		None
	}

	[Property]
	public Lobby Lobby { get; set; } = Game.ActiveScene.GetAllComponents<Lobby>().First();

	private List<Dice> _dice = new (Game.ActiveScene.GetAllComponents<Dice>());
	private IngameUiStates _state = IngameUiStates.None;
	private bool _showRoll;
	private readonly Dictionary<string, ulong> _ownedFields = new()
	{
		{ "brown1", 0 },
		{ "brown2", 0 },
		{ "lightBlue1", 0 },
		{ "lightBlue2", 0 },
		{ "lightBlue3", 0 },
		{ "pink1", 0 },
		{ "pink2", 0 },
		{ "pink3", 0 },
		{ "orange1", 0 },
		{ "orange2", 0 },
		{ "orange3", 0 },
		{ "red1", 0 },
		{ "red2", 0 },
		{ "red3", 0 },
		{ "yellow1", 0 },
		{ "yellow2", 0 },
		{ "yellow3", 0 },
		{ "green1", 0 },
		{ "green2", 0 },
		{ "green3", 0 },
		{ "blue1", 0 },
		{ "blue2", 0 },
		{ "railway1", 0 },
		{ "railway2", 0 },
		{ "railway3", 0 },
		{ "railway4", 0 },
		{ "electriccompany", 0 },
		{ "watercompany", 0 }
	};


	/// <summary>
	///     the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash()
	{
		return HashCode.Combine(Lobby, _showRoll);
	}

	private void LeaveLobby()
	{
		_state = IngameUiStates.None;
		GameNetworkSystem.Disconnect();
	}

	private async void Roll()
	{
		foreach (var dice in _dice)
		{
			dice.Roll();
		}

		while (_dice.Any(dice => dice.IsRolling))
		{
			await Task.DelayRealtimeSeconds(0.5f);
		}

		_showRoll = true;
		await Task.DelayRealtimeSeconds(2f);
		_showRoll = false;
	}

}
