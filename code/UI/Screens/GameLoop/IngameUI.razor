@namespace Monopoly.UI.Screens.GameLoop
@inherits Sandbox.UI.Panel
@using Sandbox.UI
@using System
@using System.ComponentModel.Design
@using System.Net.NetworkInformation
@using EnumExtensions
@using EnumExtensions.Settings
@using EnumExtensions.Util
@using Sandbox.Constants
@using Sandbox.Events.TurnEvents
@using Sandbox.Network
@implements Sandbox.UI.INavigatorPage


<root>
@if (_stateManager.State.Equals(IngameUiStates.EndScreen)) {
	var playerCount = Lobby.AllPlayers.Count();
	var first = Lobby.AllPlayers.FirstOrDefault(player => player.EliminatedPosition == 0);
	var second = Lobby.AllPlayers.FirstOrDefault(player => playerCount > 1 && player.EliminatedPosition == playerCount - 1);
	var third = Lobby.AllPlayers.FirstOrDefault(player => playerCount > 2 && player.EliminatedPosition == playerCount - 2);
	var forth = Lobby.AllPlayers.FirstOrDefault(player => playerCount > 3 && player.EliminatedPosition == playerCount - 3);
	var fifth = Lobby.AllPlayers.FirstOrDefault(player => playerCount > 4 && player.EliminatedPosition == playerCount - 4);


	<section class="menu">
		@if (playerCount > 1) {
			<div class="column">
				<div class="pedestal">
					<div class="pillar">
						<img src=@($"avatar:{second?.SteamId}")>
						<p>@second?.Name</p>
						<div></div>
					</div>
					<div class="pillar">
						<img src=@($"avatar:{first?.SteamId}")>
						<p>@first?.Name</p>
						<div></div>
					</div>
					<div class="pillar">
						<img src=@($"avatar:{third?.SteamId}")>
						<p>@third?.Name</p>
						<div></div>
					</div>
				</div>
				<div class="endButtons">
					<button onclick=@Quit> Leave </button>
					<button onclick=@StartNewGame> Rematch </button>
				</div>
			</div>
			<div class="restOfThePlayers">
				@if (forth != null) {
					<div class="player">
						<p> 4 </p>
						<img src=@($"avatar:{forth.SteamId}")>
						<p>@forth.Name</p>
					</div>
				}

				@if (fifth != null) {
					<div class="player">
						<p> 5 </p>
						<img src=@($"avatar:{fifth.SteamId}")>
						<p>@fifth.Name</p>
					</div>
				}
			</div>
		}
		else {
			<div class="column">
				<h1> It's only you and you still lost ... </h1>
				<h1> Well done! </h1>
				<div class="endButtons">
					<button onclick=@Quit> Leave </button>
					<button onclick=@StartNewGame> Rematch </button>
				</div>
			</div>
		}
	</section>

	return;
}

@if (_stateManager.ShowRoll && !_turnManager.CurrentPhase.Equals(TurnManager.Phase.ChooseMove)) {
	int roll1 = _dice[0].GetRoll().AsInt();
	int roll2 = _dice[1].GetRoll().AsInt();
	int amount = roll1 + roll2;
	<div style="position: absolute; align-items: center; justify-content: center; width: 100vw; height: 100vh;">

		@if (roll1 == roll2) {
			<p>Oh baby a double</p>
		}
		
		@if (_dice.Count == 2 || GetCurrentPlayer().RoundCount == 0) {
			<h1> @amount </h1>
		}
		else {
			DiceFace roll3 = _dice[2].GetRoll();
			if (roll3.AsInt() <= 3) {
				amount += roll3.AsInt();
				<h1> @amount </h1>
			}
			else {
				<h1> @amount and @(roll3.Equals(DiceFace.Bus) ? " üöå" : " üèÉ‚Äç‚ôÇÔ∏è")</h1>
			}
		
		
		}
	</div>
}


<div id="mainPanel">
	<div class="autogrow"></div>
	<button class="secondaryButton @(!CanOpenUI() ? "disabled" : "")" onclick="@(() => ChangeLocalUIState(LocalUIStates.Bank))"> üè¶ </button>
	<button class="secondaryButton @(!CanOpenUI() ? "disabled" : "")" onclick="@(() => ChangeLocalUIState(LocalUIStates.Trade))"> üí∏ </button>
	<div class="mainButton">
		<div class="@(IsCurrentPlayer() && _turnManager.CurrentPhase == TurnManager.Phase.Rolling ? "active" : "")" onclick="@Roll"></div>
		<button>
			GO
		</button>
	</div>
	<button class="secondaryButton @(!CanOpenUI() ? "disabled" : "")" onclick="@(() => ChangeLocalUIState(LocalUIStates.Building))"> üè† </button>
	<div class="autogrow"></div>
	<button class="secondaryButton" onclick="@(() => ChangeLocalUIState(LocalUIStates.Options))"> ‚öôÔ∏è </button>
</div>

<div style="position: absolute; bottom: 0; left: 0; width: 100%; flex-direction: row; justify-content: center; z-index: 10; pointer-events: none">
	@foreach (var player in Lobby.Players) {
		@if (player.EliminatedPosition <= 0) {
			<div>
				<PlayerCard Player=@player Owned=@_stateManager.OwnedFields/>
			</div>
		}
	}
</div>

@switch (_stateManager.State) {
	case IngameUiStates.Trade:
		if (_tradeState.TradingCreator.SteamId != (ulong)Game.SteamId) {
			var offerAmount = ComputeAmountFromDictionary(_tradeState.OfferTradeFields) + _tradeState.TradingOfferAmount;
			var requestAmount = ComputeAmountFromDictionary(_tradeState.RequestTradeFields) + _tradeState.TradingRequestAmount;

			<Modal OnClose=@(() => CloseGlobalModal()) Name="Trading">
				<CustomModalBody>
					<div class="trading">
						<div style="gap: 32px; align-items: center">
							<TradingPanelContainer
								Player=@_tradeState.TradingCreator
								Owned=@_stateManager.OwnedFields
								TradeFields=@_tradeState.OfferTradeFields
								OnTextEdit=@(delegate(string v) { _tradeState.TradingOfferAmount = Convert.ToInt32(v); })
								ReadOnly=@true
								Money=@_tradeState.TradingOfferAmount>
							</TradingPanelContainer>
							<div class="column">
								<div class="container summaryPanel">
									<h2> Offer </h2>
									<h3> $@offerAmount </h3>
								</div>
								<div class="container summaryPanel">
									<h2> Request </h2>
									<h3> $@requestAmount </h3>
								</div>
								@if (_tradeState.TradingPartner.SteamId == (ulong)Game.SteamId) {
									<div class="submissionContainer">
										<button onclick=@DenyTrade> Deny </button>
										<button onclick=@AcceptTrade> Accept </button>
									</div>
								}
							</div>
							<TradingPanelContainer
								Player=@_tradeState.TradingPartner
								Owned=@_stateManager.OwnedFields
								TradeFields=@_tradeState.RequestTradeFields
								OnTextEdit=@(delegate(string v) { _tradeState.TradingRequestAmount = Convert.ToInt32(v); })
								ReadOnly=@true
								Money=@_tradeState.TradingRequestAmount>
							</TradingPanelContainer>
						</div>
					</div>
				</CustomModalBody>
			</Modal>
		}

		break;
	case IngameUiStates.Auction:
		var location = _stateManager.Data as GameLocation;
		var biddings = _stateManager.GetSortedBiddings();
		var timer = 100 / _stateManager.AuctionTime * _stateManager.AuctionTimer;

		<Modal>
			<CustomModalBody>
				<div class="auction">
					<div class="timer">
						<div style="width: @(timer)%;"></div>
					</div>
					<div class="auctionBody">
						<div class="playerRow">
							@if (biddings.Count > 0) {
								@foreach (var bid in biddings) {
									var player = Lobby.Players.First(p => p.SteamId == bid.Key);

									<div class="playerBid">
										<img src=@($"avatar:{bid.Key}") style="height: 100%; aspect-ratio: 1 / 1"/>
										<div style="flex-direction: column">
											<p style="font-weight: bold; font-size: 24px">@player.Name</p>
											<p>$@bid.Value</p>
										</div>
									</div>
								}
							}
							else {
								<div class="playerBid">
									<h3> No bids to display found </h3>
								</div>
							}
						</div>
						<PropertyCard Location=@location Color=@location.Color.ToString()></PropertyCard>
					</div>
					<div style="justify-content: space-evenly">
						<button onclick=@(() => BidAmount(10)) style="width: 140px; justify-content: center; background-color: #0d151d"> $10 </button>
						<button onclick=@(() => BidAmount(50)) style="width: 140px; justify-content: center; background-color: #0d151d"> $50 </button>
						<button onclick=@(() => BidAmount(100)) style="width: 140px; justify-content: center; background-color: #0d151d"> $100 </button>
					</div>
				</div>
			</CustomModalBody>
		</Modal>
		break;
	case IngameUiStates.Chance:
		var chanceCard = _stateManager.Data as Card;
		<Modal OnClose=@(() => CloseGlobalModal(_stateManager.State)) Name="Options">
			<Content>
				<ChanceCard Text=@chanceCard.Text ImageUrl=@chanceCard.ImageUrl></ChanceCard>
			</Content>
		</Modal>
		break;
	case IngameUiStates.Community_Chest:
		var communityChestCard = _stateManager.Data as Card;
		<Modal OnClose=@(() => CloseGlobalModal(_stateManager.State)) Name="Options">
			<Content>
				<CommunityChestCard Text=@communityChestCard.Text ImageUrl=@communityChestCard.ImageUrl></CommunityChestCard>
			</Content>
		</Modal>
		break;
}

@switch (_player.localUiState) {
	case LocalUIStates.Bank:
		<Modal OnClose=@CloseLocalModal Name="Mortgage">
			<Content>
				<div class="table">
					
					@if (true) {
						var locations = _locations.FindAll(loc => CanMortgage(loc, (ulong)Game.SteamId));

						@if (locations.Count <= 0) {
							<p>It seems like you don't own any property you can put an mortgage on.</p>
						}
						else {
							@foreach (var curLocation in _locations.FindAll(loc => CanMortgage(loc, (ulong)Game.SteamId))) {
								<div class="row">
									<div class="ownership-dot @(curLocation.Color.ToClass())"></div>
									<p> @curLocation.Name </p>
									<p> Mortgage: $@(curLocation.Price / 2)</p>
									<div>
										@if (!curLocation.Mortgaged) {
											<button onclick=@(() => Mortgage(curLocation.PropertyIndex))> Mortgage </button>
										}
										else {
											<button onclick=@(() => PayMortgage(curLocation.PropertyIndex))> Pay Mortgage </button>
										}
									</div>
								</div>
							}
						}
					}
				</div>
			</Content>
		</Modal>
		break;
	case LocalUIStates.Building:
		<Modal OnClose=@CloseLocalModal Name="Building">
			<Content>
				<div class="table">
					@if (true) {
						var locations = _locations.FindAll(loc => CanBuildOn(loc, (ulong)Game.SteamId));
						
						@if (locations.Count <= 0) {
							<p>It seems like you don't have any property you can build on</p>
						}
						else {
							@foreach (var curLocation in locations) {
								if (curLocation.Type.Equals(GameLocation.PropertyType.Normal)) {
									<div class="row">
										<div class="ownership-dot @(curLocation.Color.ToClass())"></div>
										<p> @curLocation.Name </p>
										<p> Cost: $@(curLocation.House_Cost)</p>
										<div>
											<button disabled="@(curLocation.Houses == 5)" onclick=@(() => BuildHouse(curLocation.PropertyIndex))> Add </button>
											<button disabled="@(curLocation.Houses == 0)" onclick=@(() => DestroyHouse(curLocation.PropertyIndex))> Destroy </button>
										</div>
									</div>
								}
							}
						}				
		

					}
					


				</div>
			</Content>
		</Modal>
		break;
	case LocalUIStates.Buying:
		var location = _stateManager.Data as GameLocation;
		<Modal>
			<CustomModalBody>
				<div style="flex-direction: column; gap: 16px; align-items: center">
					<PropertyCard Location=@location Color=@location.Color.ToString()></PropertyCard>
					<div style="gap: 12px">
						@if (_player.Money >= location.Price) {
							<button onclick=@Buy style="padding: 2px 8px"> Buy </button>
						}
						<button onclick=@Auction style="padding: 2px 8px"> Auction </button>
					</div>
				</div>
			</CustomModalBody>
		</Modal>
		break;
	case LocalUIStates.Options:
		<Modal OnClose=@CloseLocalModal Name="Options">
			<CustomModalBody>
					<div class="settingsContainer">
                		<div class="row">
                	        <label>Master Volume:</label>
                	        <SliderControl Value:bind="@UserSettingsSystem.Current.MasterVolume" Min=@(0) Max=@(100) Step=@(1) />
                	    </div>
                        <div class="row">
                            <label>Music Volume:</label>
                            <SliderControl Value:bind="@UserSettingsSystem.Current.MusicVolume" Min=@(0) Max=@(100) Step=@(1) />
                        </div>
                        <div class="row">
                            <label>SFX Volume:</label>
                            <SliderControl Value:bind="@UserSettingsSystem.Current.SFXVolume" Min=@(0) Max=@(100) Step=@(1) />
                        </div>
                        <div class="row">
	                        <label>UI Volume:</label>
	                        <SliderControl Value:bind="@UserSettingsSystem.Current.UIVolume" Min=@(0) Max=@(100) Step=@(1) />
                        </div>
                        
                        <div class="buttons">
	                        <button onclick="@UserSettingsSystem.Save">Save</button>
	                        <button onclick="@CloseLocalModal">Close</button>
                        </div>

					</div>
			</CustomModalBody>
		</Modal>
		break;
	case LocalUIStates.Trade:
		<Modal OnClose=@(() => CloseGlobalModal()) Name="Trading">
			<CustomModalBody>
				<div class="trading">
					@if (_tradeState.TradingPartner == null) {
						<div class="container">
							<h3>
								Choose your trading partner
							</h3>
						</div>
						<div style="gap: 32px">
							@foreach (var player in Lobby.Players.Where(pl => Lobby.Players.Count == 1 || pl.SteamId != (ulong)Game.SteamId)) {
								<div onclick=@(() => { _tradeState.Network.TakeOwnership(); _tradeState.TradingPartner = player; }) class="container playerCard">
									<img src=@($"avatar:{player.SteamId}")/>
									<h3> @player.Name </h3>
								</div>
							}
						</div>
						<button onclick=@CloseTradingModal> Abort </button>
					}

					@if (_tradeState.TradingPartner != null && !_waitingForTrading) {
						var offerAmount = ComputeAmountFromDictionary(_tradeState.OfferTradeFields) + _tradeState.TradingOfferAmount;
						var requestAmount = ComputeAmountFromDictionary(_tradeState.RequestTradeFields) + _tradeState.TradingRequestAmount;

						<div style="gap: 32px; align-items: center">
							<TradingPanelContainer
								Player=@_player
								Owned=@_stateManager.OwnedFields
								TradeFields=@_tradeState.OfferTradeFields
								OnTextEdit=@(delegate(string v) { _tradeState.TradingOfferAmount = Convert.ToInt32(v); })>
							</TradingPanelContainer>
							<div class="column">
								<div class="container summaryPanel">
									<h2> Offer </h2>
									<h3> $@offerAmount </h3>
								</div>
								<div class="container summaryPanel">
									<h2> Request </h2>
									<h3> $@requestAmount </h3>
								</div>
								<div class="submissionContainer">
									<button onclick=@CloseTradingModal> Cancel </button>
									<button onclick=@SubmitTrading> Submit </button>
								</div>
							</div>
							<TradingPanelContainer
								Player=@_tradeState.TradingPartner
								Owned=@_stateManager.OwnedFields
								TradeFields=@_tradeState.RequestTradeFields
								OnTextEdit=@(delegate(string v) { _tradeState.TradingRequestAmount = Convert.ToInt32(v); })>
							</TradingPanelContainer>
						</div>
					}

					@if (_waitingForTrading) {
						<div class="column" style="gap: 64px">
							<h3> Waiting for other player... </h3>
							<button onclick=@AbortTrading style="width: auto; justify-content: center"> Abort </button>
						</div>
					}
				</div>
			</CustomModalBody>
		</Modal>
		break;
	case LocalUIStates.NotEnoughFunds:
		var data = _stateManager.Data as NotEnoughFundsEvent;
		var recipient = GetPlayer(data.Recipient);

		<Modal OnClose=@(() => CloseGlobalModal()) Name="Trading">
			<CustomModalBody>
				<div class="column notenoughfounds">
					<h3 class="container"> You ran out of money! </h3>
					<div class="container column" style="width: 600px">
						<div style="width: 100%">
							@if (recipient != null) {
								<img src=@($"avatar:{data.Recipient}") style="width: 120px; aspect-ratio: 1/1; border-radius: 8px"/>
							}
							<div style="flex-direction: column; align-items: center; justify-content: center; flex-grow: 1; height: 120px;">
								<h3> You owe @(recipient != null ? recipient.Name : "Bank"): </h3>
								<h3 style="font-weight: bolder;"> $@(data.Debts). </h3>
							</div>
						</div>

						<h3 style="width: 55%; white-space: pre-line; text-overflow: clip; text-align: center; margin-bottom: 32px">
							Gather funds by trading, mortgaging or selling to the bank!
						</h3>
					</div>
					<div style="width: 100%; gap: 16px">
						<button style="flex-grow: 1; justify-content: center; align-items: center" class="giveup" onclick=@(() => GoBankrupt(data.PlayerId, data.Recipient))> Give Up </button>

						@if (_player.Money >= data.Debts) {
							<button style="flex-grow: 1; justify-content: center; align-items: center" class="pay" onclick=@(() => PayDebts(data.PlayerId, data.Recipient, data.Debts))> Pay </button>
						}
					</div>
				</div>

			</CustomModalBody>
		</Modal>
		break;
}

@if (_turnManager.CurrentPhase == TurnManager.Phase.ChooseMove) {
	@if (IsCurrentPlayer()) {
		var value1 = _dice[0].GetRoll().AsInt();
		var value2 = _dice[1].GetRoll().AsInt();
		<div class="rollSelection">
			<h2>üöå Choose your next stop: </h2>
			<div class="rollSelectionButtons">
				@if (value1 != value2) {
					<button onclick=@(() => Move(value1))>@value1</button>
				}
				<button onclick=@(() => Move(value2))>@value2</button>
				<button onclick=@(() => Move(value1 + value2))>@(value1 + value2)</button>
			</div>

		</div>

	}
	else {
		<p>Player is choosing his next move.</p>
	}
}

@if (IsCurrentPlayer() && _turnManager.CurrentPhase.Equals(TurnManager.Phase.Jail)) {
	<div class="jailDecision">
		@if (_player.JailTurnCounter <= 3) {
			<button class="active" onclick=@JailRoll> Roll dice (@(_player.JailTurnCounter - 1)/3) </button>
		}
		<button class="active" onclick=@PayFine> Pay $50 </button>
		<button class=@(OwnsJailCard() ? "active" : "") onclick=@UseJailCard> Use Card </button>
	</div>
}

@if (!IsCurrentPlayer()) {
	<div style="position: absolute; width: 100%; justify-content: center; pointer-events: none; margin-top: 32px;">
		<h3 class="container">It's @(GetCurrentPlayer().Name)s turn</h3>
	</div>
}

@if (IsCurrentPlayer() && _turnManager.CurrentPhase == TurnManager.Phase.PlayerAction) {
	<div class="endTurn">
		<button onclick=@EndTurn> @(LobbySettingsSystem.Current.SpeedDice && GetCurrentPlayer().HasBonusMove ? "Bonus move" : "End turn") </button>
	</div>
}

@if (_player.CurrentHoverLocation != null) {
	<div style="position: absolute; bottom: 12px; left: 12px; pointer-events: none; ">
		<PropertyCard Location=@_player.CurrentHoverLocation Color=@_player.CurrentHoverLocation.Color.ToString()></PropertyCard>
	</div>
}
</root>

@code {

	public enum IngameUiStates {
		Trade,
		Chance,
		Community_Chest,
		Auction,
		EndScreen,
		None
	}

	public enum LocalUIStates {
		Trade,
		Bank,
		Options,
		Building,
		Buying,
		NotEnoughFunds,
		None
	}

	[Property]
	public Lobby Lobby { get; set; } = Game.ActiveScene.GetAllComponents<Lobby>().First();

	[Property]
	private TurnManager _turnManager { get; } = Game.ActiveScene.GetAllComponents<TurnManager>().First();

	[Property]
	private TradeState _tradeState { get; } = Game.ActiveScene.GetAllComponents<TradeState>().First();

	private readonly List<Dice> _dice = new(Game.ActiveScene.GetAllComponents<Dice>());
	private readonly IngameStateManager _stateManager = Game.ActiveScene.GetAllComponents<IngameStateManager>().First();
	private Player _player { get; set; }
	private List<GameLocation> _locations { get; } = new(Game.ActiveScene.GetAllComponents<GameLocation>());

	private bool _waitingForTrading;

	/// <summary>
	///     the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() {
		if (_player == null) {
			_player = Game.ActiveScene.GetAllComponents<Player>().First(player => player.SteamId == (ulong)Game.SteamId);
		}

		return HashCode.Combine(_stateManager.ShowRoll, _turnManager.CurrentPhase, _turnManager.CurrentPlayerIndex, _stateManager.State, _stateManager.Data, _stateManager.OwnedFields, _player.localUiState, _stateManager.AuctionTimer);
	}

	private bool IsCurrentPlayer() {
		return GetCurrentPlayer().SteamId == (ulong)Game.SteamId;
	}

	private Player GetCurrentPlayer() {
		return Lobby.Players[_turnManager.CurrentPlayerIndex];
	}

	private Player GetPlayer(ulong playerId) {
		return playerId is 1 or 2 ? null : Lobby.Players.First(p => p.SteamId == playerId);
	}
	
	private void ChangeLocalUIState(LocalUIStates newState) {
		
		if (!CanOpenUI() || newState.Equals(LocalUIStates.Trade) && !SetLocalTradeState()) {
			GameSounds.PlayUI(UiSounds.BtnDisabled);
			return;
		}
		
		GameSounds.PlayUI(UiSounds.BtnPress);
		if (_player.localUiState != LocalUIStates.Trade) {
			_player.localUiStateCache = _player.localUiState;
		}

		// Toggle ui on press of button that opens the currently open ui
		_player.LocalUiOpen = true;
		_player.localUiState = newState;
	}

	private bool SetLocalTradeState() {
		_waitingForTrading = false;
		if (_tradeState.TradingPartner == null) {
			_player.localUiStateCache = _player.localUiState;
			_player.localUiState = LocalUIStates.Trade;
		}
		else {
			GameSounds.PlayUI(UiSounds.BtnDisabled);
			return false;
		}
		GameSounds.PlayUI(UiSounds.BtnPress);

		_player.LocalUiOpen = true;
		return true;
	}
	

	private void JailRoll() {
		if (!IsCurrentPlayer() && !_turnManager.CurrentPhase.Equals(TurnManager.Phase.Jail)) {
			GameSounds.PlayUI(UiSounds.BtnDisabled);
			return;
		}
		GameSounds.PlayUI(UiSounds.BtnPress);
		_turnManager.EmitStartRollEvent(GetCurrentPlayer().SteamId);
	}

	private void PayFine() {
		if (!IsCurrentPlayer() && !_turnManager.CurrentPhase.Equals(TurnManager.Phase.Jail)) {
			GameSounds.PlayUI(UiSounds.BtnDisabled);
			return;
		}
		GameSounds.PlayUI(UiSounds.BtnPress);
		_turnManager.EmitPayJailFineEvent(_player.SteamId);
	}

	private void UseJailCard() {
		if (!IsCurrentPlayer() && !_turnManager.CurrentPhase.Equals(TurnManager.Phase.Jail)) {
			GameSounds.PlayUI(UiSounds.BtnDisabled);
			return;
		}
		GameSounds.PlayUI(UiSounds.BtnPress);
		_turnManager.EmitUseJailCardEvent(_player.SteamId);
	}

	private void Roll() {
		if (!IsCurrentPlayer() || _turnManager.CurrentPhase != TurnManager.Phase.Rolling) {
			GameSounds.PlayUI(UiSounds.BtnDisabled);
			return;
		}
		GameSounds.PlayUI(UiSounds.BtnPress);

		_turnManager.EmitStartRollEvent(_player.SteamId);
	}

	private void Buy() {
		GameSounds.PlayUI(UiSounds.BtnPress);
		_turnManager.EmitPropertyAquiredEvent((ulong)Game.SteamId, Lobby.Players[_turnManager.CurrentPlayerIndex].CurrentField, false);
		CloseLocalModal();
	}

	private void Auction() {
		GameSounds.PlayUI(UiSounds.BtnPress);
		var player = Lobby.Players[_turnManager.CurrentPlayerIndex];
		_turnManager.EmitPropertyAuctionEvent(player.CurrentField, player.SteamId);

		player.localUiStateCache = LocalUIStates.Building;
		player.localUiState = LocalUIStates.None;
	}

	private void EndTurn() {
		GameSounds.PlayUI(UiSounds.BtnPress);

		if (GetCurrentPlayer().HasBonusMove) {
			_turnManager.EmitStartBonusMove(_player.SteamId);
		}
		else {
			_turnManager.EmitTurnFinishedEvent();	
		}

	}

	private void CloseLocalModal() {
		GameSounds.PlayUI(UiSounds.BtnPress);
		_player.LocalUiOpen = false;
		_player.localUiState = _player.localUiStateCache;
		_player.localUiStateCache = LocalUIStates.None;
	}

	private void CloseGlobalModal(IngameUiStates state = IngameUiStates.None) {
		if (!state.Equals(IngameUiStates.None) && IsCurrentPlayer()) {
			GameSounds.PlayUI(UiSounds.BtnPress);
			var card = _stateManager.Data as Card;
			_turnManager.EmitEventCardClosedEvent(card.ActionId, (ulong)Game.SteamId, state.Equals(IngameUiStates.Chance));
			_stateManager.State = IngameUiStates.None;
		}
		else {
			GameSounds.PlayUI(UiSounds.BtnDisabled);
		}
	}


	private void BidAmount(int amount) {
		var currentMax = _stateManager.GetSortedBiddings()[0].Value;
		if (_player.Money >= currentMax + amount) {
			GameSounds.PlayUI(UiSounds.BtnPress);
			_turnManager.EmitAuctionBidEvent(_player.SteamId, amount);
		}
		else {
			GameSounds.PlayUI(UiSounds.BtnDeny);
		}
	}

	private void Mortgage(int propertyIndex) {
		_turnManager.EmitPropertyMortgagedEvent(propertyIndex, (ulong)Game.SteamId);
	}

	private void PayMortgage(int propertyIndex) {
		_turnManager.EmitPropertyMortgagePayedEvent(propertyIndex, (ulong)Game.SteamId);
	}

	private void BuildHouse(int propertyIndex) {
		_turnManager.EmitBuildHouseEvent(propertyIndex, (ulong)Game.SteamId);
	}
	
	private void DestroyHouse(int propertyIndex) {
		_turnManager.EmitDestroyHouseEvent(propertyIndex, (ulong)Game.SteamId);
	}

	private bool OwnsJailCard() {
		return _stateManager.OwnedFields["chanceJailFree"] == _player.SteamId || _stateManager.OwnedFields["communityJailFree"] == _player.SteamId;
	}

	private bool CanBuildOn(GameLocation location, ulong playerId) {
		if (!location.Type.Equals(GameLocation.PropertyType.Normal)) {
			return false;
		}

		return location.GroupMembers
		               .All(member => {
			               var parentChild = location.GameObject.Parent.Children[member];
			               GameLocation gameLocation = parentChild.Components.Get<GameLocation>();
			               return _stateManager.OwnedFields[parentChild.Name] == playerId && !gameLocation.Mortgaged;
		               });
	}

	private bool CanMortgage(GameLocation location, ulong playerId) {
		GameLocation.PropertyType[] mortgageable = { GameLocation.PropertyType.Normal, GameLocation.PropertyType.Railroad, GameLocation.PropertyType.Utility };

		if (!mortgageable.Contains(location.Type) || _stateManager.OwnedFields[location.GameObject.Name] != playerId) {
			return false;
		}
		//Log.Info("Owner " + _stateManager.OwnedFields[location.GameObject.Name]);

		if (location.Type.Equals(GameLocation.PropertyType.Normal)) {
			return location.GroupMembers
			               .All(member => {
				               var parentChild = location.GameObject.Parent.Children[member];
				               GameLocation gameLocation = parentChild.Components.Get<GameLocation>();
				               return gameLocation.Houses <= 0;
			               });
		}

		return true;
	}


	private void CloseTradingModal() {
		CloseLocalModal();

		_tradeState.TradingCreator = null;
		_tradeState.TradingPartner = null;
		_tradeState.TradingOfferAmount = 0;
		_tradeState.TradingRequestAmount = 0;
		_waitingForTrading = false;

		foreach (var key in _tradeState.OfferTradeFields.Keys) {
			_tradeState.OfferTradeFields[key] = false;
			_tradeState.RequestTradeFields[key] = false;
		}
	}

	private void AbortTrading() {
		_turnManager.EmitTradingDeniedEvent((ulong)Game.SteamId);
		CloseTradingModal();
	}

	private void SubmitTrading() {
		_waitingForTrading = true;
		_tradeState.TradingCreator = _player;
		GameSounds.PlayUI(UiSounds.BtnPress);
		_turnManager.EmitTradingRequestedEvent((ulong)Game.SteamId, _tradeState.TradingPartner.SteamId);
	}

	private void AcceptTrade() {
		_turnManager.EmitTradingAcceptedEvent((ulong)Game.SteamId);
	}

	private void DenyTrade() {
		_turnManager.EmitTradingDeniedEvent((ulong)Game.SteamId);
	}

	private bool CanOpenUI(LocalUIStates? state = null) {
		var allowedPhases = new List<TurnManager.Phase>() { TurnManager.Phase.PlayerAction, TurnManager.Phase.InAction, TurnManager.Phase.Rolling };

		var isCurrentPlayer = Lobby.Players[_turnManager.CurrentPlayerIndex].SteamId == (ulong)Game.SteamId;
		var isAllowedPhase = allowedPhases.Contains(_turnManager.CurrentPhase);

		return (isCurrentPlayer && isAllowedPhase || state == LocalUIStates.Options) && !_player.LocalUiOpen;
	}

	private int ComputeAmountFromDictionary(NetDictionary<string, bool> dictionary) {
		var locationObjects = _stateManager.LocationContainer.Children;
		int amount = 0;

		foreach (var (key, value) in dictionary.ToList()) {
			if (!key.Contains("JailFree")) {
				var location = locationObjects.First(o => o.Name == key).Components.Get<GameLocation>();
				if (value) {
					if (location.Mortgaged) {
						amount += location.Price - Convert.ToInt32(Math.Floor((location.Price / 2) * 1.1));
					}
					else {
						amount += location.Price;
					}
				}
			}
			else {
				if (value) {
					amount += 50;
				}
			}
		}

		return amount;
	}

	private void PayDebts(ulong sender, ulong recipient, int amount) {
		_turnManager.EmitPlayerPaymentEvent(sender, recipient, amount);
		_player.localUiState = LocalUIStates.None;
	}

	private void GoBankrupt(ulong player, ulong recipient) {
		_turnManager.EmitPlayerBankruptEvent(player, recipient);
	}

	private void StartNewGame() {
		MusicManager musicManager = Game.ActiveScene.GetAllComponents<MusicManager>().First();
		musicManager.StopSound();
		Game.ActiveScene.LoadFromFile("scenes/board.scene");
	}

	private void Quit() {
		Game.Disconnect();
	}
	
	private void Move(int toMove) {
		if (toMove == 0) {
			Log.Error("Move cannot be called with 0!");
			return;
		}
		
		if ((ulong) Game.SteamId == GetCurrentPlayer().SteamId) {
			_turnManager.ChangePhase(GetCurrentPlayer().SteamId, TurnManager.Phase.InAction);
			_turnManager.EmitStartMove(GetCurrentPlayer().SteamId, toMove);
			GameSounds.PlayUI(UiSounds.BtnPress);
		}
		else {
			GameSounds.PlayUI(UiSounds.BtnDeny);
		}
	}
	


}
