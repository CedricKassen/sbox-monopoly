@namespace Monopoly.UI.Screens.GameLoop
@inherits Sandbox.UI.Panel
@using System
@using Sandbox.Network
@implements Sandbox.UI.INavigatorPage


<root class="menu">
	<h1> MY_POOL_NO </h1>

	<div class="overview">
		<div class="lobbyIconContainer">
			@foreach (var pawn in Lobby.PlayerPrefabs) {
				// Scale to render the icons in correct proportion 
				var scale = 0.2F;

				// Scale da thing down/up
				var width = scale * pawn.Width;
				var height = scale * pawn.Height;

				var ownSteamId = Connection.Local.SteamId;

				// Mark pawn as selected
				@if (Lobby.SelectedPawns[pawn] != 0L) {
					<div style="background-color: #0dc64f; width: 30px; height: 30px"></div>
				}

				// Disable every pawn client has not claimed itself
				<button disabled="(@Lobby.SelectedPawns[pawn] != @ownSteamId)" class="lobbyIcon" onclick=@(() => PawnSelectionChanged(pawn, ownSteamId))>
					<img style="width: @width px; height: @height px" src="@pawn.ImgPath" alt="@pawn.Prefab.Name"/>
				</button>
			}
		</div>


		<h3>@Lobby.Players.Count()/@Lobby.MaxPlayers</h3>
		<div class="player-container">
			@foreach (var player in Lobby.Players) {
				<div class="player">
					<img src=@($"avatar:{player.SteamId}")/>
					<h3>@player.Name</h3>
				</div>
			}
		</div>
	</div>

	@if (Networking.IsHost) {
		<button onclick=@Start>Start</button>
	}

	<div class="hub-buttons">
		<button class="back icon" onclick="@PressBack">
			keyboard_return
		</button>
	</div>

	<div></div>
</root>

@code
{
	public Lobby Lobby { get; set; }
	
	public bool EveryPlayerHasSelected() {
		var selectedPawnCount = Lobby.SelectedPawns.Count(pair => pair.Value != 0);
		var totalPlayerCount = Lobby.Players.Count;

		return selectedPawnCount == totalPlayerCount;
	}


	public void PawnSelectionChanged(PawnWrapper pawn, ulong ownSteamId) {
		var lobbySelectedPawns = Lobby.SelectedPawns;
		var pawnOwnership = lobbySelectedPawns.First(pair => pair.Key.Equals(pawn)).Value;

	// owned by 0 means unowned!

	// Do nothing if client somehow pressed pawn that is claimed by another player
		if (pawnOwnership != 0 && pawnOwnership != ownSteamId) {
			return;
		}

	// If pawn is ours just deselect it
		if (pawnOwnership == ownSteamId) {
			lobbySelectedPawns[pawn] = 0;
			return;
		}

	// Pawn must be unowned

	// If we own another pawn deselect the other pawn
		if (lobbySelectedPawns.ContainsValue(ownSteamId)) {
			lobbySelectedPawns[lobbySelectedPawns.First(pair => pair.Value == ownSteamId).Key] = 0;
		}

		lobbySelectedPawns[pawn] = ownSteamId;
	}

	public void OnNavigationOpen() {
		if (Lobby == null) {
			Lobby = Game.ActiveScene.GetAllComponents<Lobby>().First();
		}

		Lobby.LobbyPanel = this;
	}

	/// <summary>
	///     the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() {
		return HashCode.Combine(Lobby);
	}

	void PressBack() {
		GameNetworkSystem.Disconnect();
		Game.ActiveScene.LoadFromFile("scenes/game_menu.scene");
	}

	public void Start() {
		if (!EveryPlayerHasSelected()) {
	// TODO remove default click sound from button sound-in: unset/none won't work!
	// somehow call the check in the ui to disable the button would be the best for now its here
			PlaySound("ui.button.deny");
			return;
		}
		Lobby.InitializePlayers();
		Lobby.StartGame();
	}
}
